<project name="Strand Map Service" basedir="." default="deploy">

    <!--



        To build and deploy this application, please set the following build properties.

        These may go in a file named build.properties in your home directory or one level

        up from the build directory (where ant commands are executed):



        Required:

            Java 6



        Required:

            BoLT.tomcat.home

            BoLT.db.Driver.User

            BoLT.db.Driver.Password

            BoLT.db.Cache.Directory

            BoLT.db.Cache.Persitent



            Example settings:

            BoLT.tomcat.home=C:/Program Files/Apache Software Foundation/Tomcat 5.5

            BoLT.db.Driver.User=joeuser

            BoLT.db.Driver.Password=mypass



        Optional (default to localhost 8080 if not set):

            BoLT.global.host.port.url - The global host and port URL

            BoLT.cmsServerHost - The local host name (local to the server installation)

            BoLT.cmsServerPort - The local host port number



            Example settings:

            BoLT.global.host.port.url=http://www.mydomain.org

            BoLT.cmsServerHost=localhost

            BoLT.cmsServerPort=80





        Optional database settings. If not defined, defaults to using

        MySQL at localhost with smsServer as database name

        (see more example settings below):

            BoLT.db.Driver.Name

            BoLT.db.Driver.URL

            BoLT.db.Driver.database



            Example settings:

            BoLT.db.Driver.Name=com.mysql.jdbc.Driver

            BoLT.db.Driver.URL=jdbc:mysql://localhost/

            BoLT.db.Driver.database=smsServer



        Optional for remote WAR deployment via Tomcat manager:

            BoLT.tomcat.manager.URL

            BoLT.tomcat.username

            BoLT.tomcat.username



            Example settings:

            BoLT.tomcat.manager.URL=http://localhost/manager

            BoLT.tomcat.username=admin

            BoLT.tomcat.username=admin



     -->


    <!-- The following two properties should be updated below each time a new release or version is issued -->

    <property name="app.version" value="1.2.35"/>

    <property name="context.name" value="cms1-2"/>


    <property name="BoLT.basedir" value="${basedir}"/>

    <property name="BoLT.srcDir" value="${basedir}/WEB-INF/src"/>

    <property name="BoLT.buildBase" value="${basedir}/build"/>

    <property name="BoLT.distDir" value="./Dist"/>

    <property name="BoLT.contextFile" value="context.xml"></property>

    <property file="../sms.properties"/>

    <property file="../build.properties"/>

    <property file="${user.home}/build.properties"/>

    <property file="build.properties"/>

    <property name="BoLT.deploy.home" value="${BoLT.tomcat.home}/webapps/${context.name}"/>


    <!-- Common lib at $TC_HOME/common/lib on TC5, $TC_HOME/lib on TC6 -->

    <property name="BoLT.tomcat.common.lib" value="${BoLT.tomcat.home}/lib"/>


    <!-- Server lib at $TC_HOME/server/lib on TC5, $TC_HOME/lib on TC6 -->

    <property name="BoLT.tomcat.server.lib" value="${BoLT.tomcat.home}/lib"/>


    <!-- Default property settings - override in build.properties -->


    <!-- Local server paths used in the Tag Libs -->

    <property name="BoLT.cmsServerHost" value="localhost"/>

    <property name="BoLT.cmsServerPort" value="8080"/>


    <property name="BoLT.global.host.port.url" value="http://${BoLT.cmsServerHost}:${BoLT.cmsServerPort}"/>


    <property name="jsapi.clients.service.url"
              value="http://${BoLT.cmsServerHost}:${BoLT.cmsServerPort}/${context.name}/jsapi"/>


    <!-- OAI data provider settings: -->

    <property name="oai.admin.email" value=""/>

    <property name="oai.view.url" value="http://strandmaps.dls.ucar.edu"/>


    <!-- Properties used below -->


    <!-- Locally accessable URL to the context, used to pull content in server-side -->

    <property name="local.context.url" value="http://${BoLT.cmsServerHost}:${BoLT.cmsServerPort}/${context.name}"/>


    <!-- Globally accessable URL to the context -->

    <property name="global.context.url" value="${BoLT.global.host.port.url}/${context.name}"/>


    <property name="BoLT.cmsServerUrlPath" value="/${context.name}/Query"/>


    <filterset id="jsapi_url">

        <filter token="JSAPI_SERVICE_URL" value="${jsapi.clients.service.url}"/>

    </filterset>


    <!-- ### Default settings for db ### -->


    <!-- ### DB cache ### -->


    <property name="BoLT.db.Cache.Directory" value="WEB-INF/cache"/>

    <property name="BoLT.db.Cache.Persistent" value="false"/>


    <!-- ### JDBC Driver ### -->

    <property name="BoLT.db.Driver.Name" value="com.mysql.jdbc.Driver"/>

    <!-- <property name="BoLT.db.Driver.Name" value="org.postgresql.Driver"/> -->

    <!-- <property name="BoLT.db.Driver.Name" value="com.microsoft.jdbc.sqlserver.SQLServerDriver"/> -->


    <!-- ### Database URL ### -->

    <property name="BoLT.db.Driver.URL" value="jdbc:mysql://localhost/"/>

    <!-- <property name="BoLT.db.Driver.URL" value="jdbc:postgresql://localhost/StrandMap"/> -->

    <!-- <property name="BoLT.db.Driver.URL" value="jdbc:microsoft:sqlserver://localhost;databasename=StrandMap"/> -->


    <!-- ### Database name (for MySQL) ### -->

    <property name="BoLT.db.Driver.database" value="smsServer"/>


    <!-- Builds classpath for compiling Concept Map Service Code -->

    <path id="BoLT.compile.path">

        <!-- Including SMS resources in classpath -->

        <pathelement location="${BoLT.buildBase}/WEB-INF/classes"/>

        <fileset dir="${BoLT.basedir}/WEB-INF/lib">

            <include name="*.jar"/>

        </fileset>

        <fileset dir="${BoLT.basedir}/WEB-INF/lib/batik">

            <include name="*.jar"/>

        </fileset>

        <!-- Including tomcat resources in classpath -->

        <fileset dir="${BoLT.tomcat.common.lib}">

            <include name="*.jar"/>

        </fileset>

        <fileset dir="${BoLT.tomcat.server.lib}">

            <include name="*.jar"/>

        </fileset>

    </path>


    <!-- Configure the custom Ant tasks for the Manager application -->

    <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask">

        <classpath refid="BoLT.compile.path"/>

    </taskdef>

    <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask">

        <classpath refid="BoLT.compile.path"/>

    </taskdef>


    <!-- Compiles the Concept Map Service Web Services -->

    <target name="compile" depends="makeDirectoryStructure">

        <echo message="The Java version is: ${ant.java.version} (Java 1.6 and greater is required, not 1.5)"/>

        <javac srcdir="${BoLT.srcDir}" destdir="${BoLT.buildBase}/WEB-INF/classes" optimize="${BoLT.optimize}"
               deprecation="${BoLT.deprecation}" debug="${BoLT.unchecked}">

            <classpath refid="BoLT.compile.path"/>

        </javac>

    </target>


    <!-- Copies the databased file to appropriate directory -->

    <target name="copyDatabase">

        <copy file="${BoLT.basedir}/WEB-INF/Database/strandmap.sql" todir="${BoLT.buildBase}/WEB-INF/Database"/>

    </target>


    <!-- Copies the properties file to appropriate directories -->

    <target name="copyPropertyFiles">

        <copy todir="${BoLT.buildBase}/WEB-INF/classes">

            <fileset dir="${BoLT.srcDir}" includes="**/*.properties **/*.txt"/>


            <!-- Substitute in the local db properties -->

            <filterset>

                <filter token="DB.DRIVER.NAME" value="${BoLT.db.Driver.Name}"/>

                <filter token="DB.DRIVER.URL" value="${BoLT.db.Driver.URL}"/>

                <filter token="DB.DRIVER.DATABASE" value="${BoLT.db.Driver.database}"/>

                <filter token="DB.DRIVER.USER" value="${BoLT.db.Driver.User}"/>

                <filter token="DB.DRIVER.PASSWORD" value="${BoLT.db.Driver.Password}"/>

                <filter token="CACHE.DIRECTORY" value="${BoLT.db.Cache.Directory}"/>

                <filter token="CACHE.PERSISTENT" value="${BoLT.db.Cache.Persistent}"/>

            </filterset>

        </copy>

    </target>


    <!-- Packages Concept Map Service web service into a Java archive file -->

    <target name="makeJar" depends="compile,copyDatabase,copyPropertyFiles">

        <jar destfile="${BoLT.buildBase}/WEB-INF/lib/${context.name}.jar" basedir="${BoLT.buildBase}/WEB-INF/classes">

            <metainf dir="${BoLT.basedir}/WEB-INF/src/META-INF"/>

        </jar>

    </target>


    <!-- Creates appropriate directory structure for the application -->

    <target name="makeDirectoryStructure">

        <mkdir dir="${BoLT.buildBase}/WEB-INF/classes"/>

        <mkdir dir="${BoLT.buildBase}/WEB-INF/Database"/>

        <mkdir dir="${BoLT.buildBase}/WEB-INF/lib"/>

        <mkdir dir="${BoLT.buildBase}/WEB-INF/tlds"/>

        <mkdir dir="${BoLT.buildBase}/WEB-INF/XML"/>

        <mkdir dir="${BoLT.buildBase}/Log"/>

        <mkdir dir="${BoLT.buildBase}/META-INF"/>

    </target>


    <!-- Cleans the build directory -->

    <target name="clean"
            description="Cleans the build. Use to to force a full build of the application on next deploy.">

        <delete dir="${BoLT.buildBase}"/>

    </target>


    <!-- Cleans the deployed application in Tomcat webapps -->

    <target name="deploy-clean" description="Cleans the application from the Tomcat webapps directory.">

        <delete dir="${BoLT.deploy.home}"/>

    </target>


    <!-- Copy third party binary rescoures to appropriate directories -->

    <target name="copyThirdPartyResources">

        <copy todir="${BoLT.buildBase}/WEB-INF/lib">

            <fileset dir="${BoLT.basedir}/WEB-INF/lib" includes="*.jar"/>

        </copy>

        <copy todir="${BoLT.buildBase}/WEB-INF/lib">

            <fileset dir="${BoLT.basedir}/WEB-INF/lib/batik" includes="*.jar"/>

        </copy>

    </target>


    <!-- Copy CSIP schema and conversion stylesheets to appropriate directories -->

    <target name="copyXMLResources">

        <copy todir="${BoLT.buildBase}/WEB-INF/XML">

            <fileset dir="${BoLT.basedir}/WEB-INF/XML" includes="**/*.*"/>

        </copy>

    </target>


    <!-- Copy some other reaoures to appropriate directories -->

    <target name="copyMiscResources">

        <echo>Using global.context.url '${global.context.url}'</echo>

        <echo>Using local.context.url '${local.context.url}'</echo>


        <filterset id="gcu">

            <filter token="GLOBAL_CONTEXT_URL" value="${global.context.url}"/>

        </filterset>

        <filterset id="lcu">

            <filter token="LOCAL_CONTEXT_URL" value="${local.context.url}"/>

        </filterset>

        <filterset id="csh">

            <filter token="LOCAL_HOST" value="${BoLT.cmsServerHost}"/>

        </filterset>

        <filterset id="csp">

            <filter token="LOCAL_PORT" value="${BoLT.cmsServerPort}"/>

        </filterset>

        <filterset id="csup">

            <filter token="QUERY_URL_PATH" value="${BoLT.cmsServerUrlPath}"/>

        </filterset>

        <filterset id="version">

            <filter token="VERSION" value="${app.version}"/>

        </filterset>


        <copy todir="${BoLT.buildBase}/jsapi">

            <fileset dir="${BoLT.basedir}/jsapi">

                <include name="**/*.jsp"/>

                <include name="**/*.css"/>

                <include name="**/*.js"/>

                <include name="**/*.txt"/>

                <include name="**/*.xml"/>

            </fileset>

            <filterset refid="gcu"/>

            <filterset refid="lcu"/>

            <filterset refid="csh"/>

            <filterset refid="csp"/>

            <filterset refid="csup"/>

            <filterset refid="version"/>

        </copy>


        <copy todir="${BoLT.buildBase}/jsapi">

            <fileset dir="${BoLT.basedir}/jsapi" includes="**/*.*"/>

        </copy>


        <copy todir="${BoLT.buildBase}/docs">

            <fileset dir="${BoLT.basedir}/docs">

                <include name="**/*.jsp"/>

                <include name="**/*.css"/>

                <include name="**/*.js"/>

                <include name="**/*.txt"/>

                <include name="**/*.xml"/>

                <include name="**/*.opml"/>

                <include name="**/*.html"/>

            </fileset>

            <filterset refid="gcu"/>

            <filterset refid="lcu"/>

            <filterset refid="csh"/>

            <filterset refid="csp"/>

            <filterset refid="csup"/>

            <filterset refid="version"/>

            <filterset refid="jsapi_url"/>

        </copy>


        <copy todir="${BoLT.buildBase}/docs">

            <fileset dir="${BoLT.basedir}/docs">

                <include name="**/*.jpg"/>

                <include name="**/*.gif"/>

                <include name="**/*.png"/>

            </fileset>

        </copy>


        <copy todir="${BoLT.buildBase}/docs">

            <fileset dir="${BoLT.basedir}/docs" includes="**/*"/>

        </copy>


        <copy todir="${BoLT.buildBase}/WEB-INF">

            <fileset dir="${BoLT.basedir}/WEB-INF">

                <include name="**/*.txt"/>

                <include name="**/*.xml"/>

            </fileset>

            <filterset refid="version"/>

        </copy>


        <copy todir="${BoLT.buildBase}/WEB-INF">

            <fileset dir="${BoLT.basedir}/WEB-INF" includes="*.*"/>

        </copy>


        <copy todir="${BoLT.buildBase}/WEB-INF/tlds">

            <fileset dir="${BoLT.basedir}/WEB-INF/tlds" includes="**/*.*"/>

        </copy>


        <copy todir="${BoLT.buildBase}">

            <fileset dir="${BoLT.basedir}" includes="*.wsdl *.xml *.properties *.jsp *.ini"/>

            <filterset>

                <filter token="OAI_ADMIN_EMAIL" value="${oai.admin.email}"/>

                <filter token="OAI_VIEW_BASE_URL" value="${oai.view.url}"/>

            </filterset>

        </copy>


        <copy todir="${BoLT.buildBase}/META-INF">

            <fileset file="${BoLT.basedir}/${BoLT.contextFile}"/>

        </copy>

    </target>


    <!-- Deploy the application to the Tomcat webapps directory-->

    <target name="deploy" depends="buildApp" description="Deploy to Tomcat webapps directory">

        <!-- Copy the contents of the build directory -->

        <mkdir dir="${BoLT.deploy.home}"/>


        <copy todir="${BoLT.deploy.home}">

            <fileset dir="${BoLT.buildBase}"/>

        </copy>

    </target>


    <!-- Deploy the compiled and configured Concept Map Service to tomcat webapps directory-->

    <target name="deploy-war" depends="war"
            description="Deploy the SMS to Tomcat via the manager. Please use this task when tomcat is running">

        <echo>Note: This target requires Ant 1.6 or later; Tomcat must be running.</echo>

        <deploy url="${BoLT.tomcat.manager.URL}" username="${BoLT.tomcat.username}" password="${BoLT.tomcat.password}"
                path="/${context.name}" war="${BoLT.distDir}/${context.name}.war"/>

        <!-- <delete dir="${BoLT.distDir}"/> -->

    </target>


    <!-- Please use this target when tomcat is running -->

    <target name="undeploy-war"
            description="Undeploy the SMS in Tomcat via the manager. Please use this target when tomcat is not running">

        <echo>Note: This target requires Ant 1.6 or later; Tomcat must be running.</echo>

        <undeploy url="${BoLT.tomcat.manager.URL}" username="${BoLT.tomcat.username}" password="${BoLT.tomcat.password}"
                  path="/${context.name}"/>

        <delete dir="${BoLT.tomcat.home}/work/Catalina/localhost/${context.name}"/>

    </target>


    <!-- This target creates web archive file (WAR) file for distributions -->

    <target name="war" depends="buildApp" description="Makes a Web Archive File (WAR) for easy distribution">

        <mkdir dir="${BoLT.distDir}"/>

        <war destfile="${BoLT.distDir}/${context.name}.war"

             basedir="${BoLT.buildBase}"

             webxml="${BoLT.buildBase}/WEB-INF/web.xml"/>


        <!-- <delete dir="${BoLT.buildBase}"/> -->

    </target>


    <!-- Prepare and compile the application to the build directory -->

    <target name="buildApp"

            depends="makeDirectoryStructure,makeJar,copyThirdPartyResources,copyXMLResources,copyMiscResources"

            description="Builds the application to the build directory"/>


</project>

